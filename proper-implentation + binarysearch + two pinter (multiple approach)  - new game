import javax.management.MBeanRegistration;
import java.awt.image.AreaAveragingScaleFilter;
import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Array;
import java.util.*;

// JAI SHREE RAM  JAI BAJRANGBALI//

public class CodeForces {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        FastReader fr = new FastReader();
        int nmax = (int) (1e5 + 7);
        int t = fr.nextInt();
        while (t-- > 0) {
           int n = fr.nextInt();
           long  k = fr.nextLong();
           long a[] = new long[n];
           HashMap<Long, Long>map = new HashMap<>();
            HashSet<Long>ht  =new HashSet<>();
            for (int i = 0; i < n; i++) {
                a[i] = fr.nextLong();
                map.put(a[i], map.getOrDefault(a[i],(long)0)+1);
                ht.add(a[i]);
            }
            long temp=1;
            Arrays.sort(a);
//            System.out.println(Arrays.toString(a));
            List<Pair> list  =new ArrayList<>();
            int i;
            for ( i = 1; i < n; i++) {
                if(a[i]==a[i-1]){
                    temp++;
                }
                else{
                    list.add(new Pair(a[i-1], temp));
                    temp=1;
                }
            }
            long j =1;
            long h= i;
            while( i-2 >=0 && a[i-1]==a[i-2]){
                j++;
                i--;
            }
            list.add(new Pair(a[i-1], j));
            long ans=0;
            int sl=1;
            ans = list.get(0).b;
            long tam=0;
            tam = Math.max(ans, tam);
               for (int l = 1; l < list.size(); l++) {
                if(list.get(l).a!= (list.get(l-1).a+1)){
                    tam  = list.get(l).b;
                    ans = Math.max(ans, tam);
                    sl =1;
                }
                else if(sl+1<=k){
                    tam+=list.get(l).b;
                    sl++;
                    ans = Math.max(ans, tam);
                }
                else{
                    tam -=list.get(l-sl).b;
                    tam+=list.get(l).b;
                    ans = Math.max(ans, tam);
                }
            }
            System.out.println(ans);







        }
    }


      public static class Pair {
        public long a;
        public long  b;
        public int hashCode;

        Pair(long a, long b) {
            this.a = a;
            this.b = b;
            this.hashCode = Objects.hash(a, b);
        }


        @Override
        public String toString() {
            return a + " -> " + b;
        }


        @Override
        public boolean equals(Object o) {
            if (this == o)
                return true;
            if (o == null || getClass() != o.getClass())
                return false;
            Pair that = (Pair) o;
            return a == that.a && b == that.b;
        }

        @Override
        public int hashCode() {
            return this.hashCode;
        }
    }

}




class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                String line = br.readLine();

                if (line == null) {
                    return null;
                }

                st = new StringTokenizer(line);

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    String nextLine() {
        String str = "";
        try {
            if (st.hasMoreTokens()) {
                str = st.nextToken("\n");
            } else {
                str = br.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }
    public static long gcd(long a, long b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

}

