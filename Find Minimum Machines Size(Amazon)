import javax.management.MBeanRegistration;
import java.io.*;
import java.math.BigInteger;
import java.sql.Array;
import java.sql.SQLOutput;
import java.util.*;

// JAI SHREE RAM  JAI BAJRANGBALI//
//Q-    Find Minimum Machines Size


public class CodeForces {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        FastReader fr = new FastReader();
        long nmax = (long) (1e9 + 7);
        int t = fr.nextInt();
        while (t-- > 0) {

        }
         int machine[] = {1, 2, 2, 1, 1};
        List<Integer>res = new ArrayList<>();
        res.add(machine[0]);
        int prev = machine[0];
        for(int i =1;i< machine.length-1;i++){
               int curr = machine[i];
               int next = machine[i+1];
               if(Math.abs(prev-curr) + Math.abs(curr-next)==Math.abs(prev - next)){
                   continue;
               }
               else res.add(curr);
        }
        res.add(machine[machine.length-1]);
        System.out.println(res);
        System.out.println(res.size());
    }




    public static class Pair {
        public int a;
        public int  b;
        public int hashCode;

        Pair(int a, int b) {
            this.a = a;
            this.b = b;
            this.hashCode = Objects.hash(a, b);
        }


        @Override
        public String toString() {
            return a + " -> " + b;
        }


        @Override
        public boolean equals(Object o) {
            if (this == o)
                return true;
            if (o == null || getClass() != o.getClass())
                return false;
            Pair that = (Pair) o;
            return a == that.a && b == that.b;
        }

        @Override
        public int hashCode() {
            return this.hashCode;
        }
    }

}




class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                // Read the next line
                String line = br.readLine();

                // Check if the line is null
                if (line == null) {
                    return null;  // Handle end of input or unexpected input issues
                }

                // Initialize the StringTokenizer with the read line
                st = new StringTokenizer(line);

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    String nextLine() {
        String str = "";
        try {
            if (st.hasMoreTokens()) {
                str = st.nextToken("\n");
            } else {
                str = br.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }
}

