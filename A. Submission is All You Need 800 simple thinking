import javax.management.MBeanRegistration;
import java.io.*;
import java.math.BigInteger;
import java.sql.Array;
import java.sql.SQLOutput;
import java.util.*;

// JAI SHREE RAM  JAI BAJRANGBALI//



public class CodeForces {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        FastReader fr = new FastReader();
        long nmax = (long) (1e9 + 7);
        int t = fr.nextInt();
        while (t-- > 0) {
            int n = fr.nextInt();
            int arr[] = new int[n];
            for(int i =0;i< arr.length;i++){
                arr[i]  = fr.nextInt();
            }
            int sum=0;
            int ans =0;
            int mex=0;
            for(int i =0;i<arr.length;i++){
                if(arr[i]==0)mex++;
                ans += Math.max(arr[i],mex);
                mex=0;
            }

            System.out.println(ans);


            }

        }





    public static class Pair {
        public int a, b;
        Pair(int a, int b) {
            this.a = a;
            this.b = b;

        }


        @Override
        public String toString() {
            return a + " -> " + b;
        }


        @Override
        public boolean equals(Object o) {
            if (this == o)
                return true;
            if (o == null || getClass() != o.getClass())
                return false;
            Pair that = (Pair) o;
            return a == that.a && b == that.b;
        }


    }

}




class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                // Read the next line
                String line = br.readLine();

                // Check if the line is null
                if (line == null) {
                    return null;  // Handle end of input or unexpected input issues
                }

                // Initialize the StringTokenizer with the read line
                st = new StringTokenizer(line);

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    String nextLine() {
        String str = "";
        try {
            if (st.hasMoreTokens()) {
                str = st.nextToken("\n");
            } else {
                str = br.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }
}



/*
0 1 1
0 , 0 1,0 1 1
1,1 1
1
 */
