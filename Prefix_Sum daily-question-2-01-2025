import javax.management.MBeanRegistration;
import java.awt.image.AreaAveragingScaleFilter;
import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Array;
import java.util.*;

// JAI SHREE RAM  JAI BAJRANGBALI//


public class CodeForces {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        FastReader fr = new FastReader();
        int nmax = (int) (1e5 + 7);
        int t = fr.nextInt();
        int MOD = (int) 1e9 + 7;
        while (t-- > 0) {
            String[] words = {"a","e","i"};
            int[][] queries = {{0,2},{0,1},{2,2}};
            List<Integer>list  = new ArrayList<>();
            int pref[] = new int[words.length];
            String s = words[0];
                if(s.startsWith("a") ||s.startsWith("e") || s.startsWith("i") || s.startsWith("o") || s.startsWith("u")){
                    if(s.endsWith("a") ||s.endsWith("e") || s.endsWith("i") || s.endsWith("o") || s.endsWith("u")){
                        pref[0]++;
                    }
                }

            for (int i = 1; i < pref.length; i++) {
                int num=0;
                 String k  = words[i];
                if(k.startsWith("a") ||k.startsWith("e") || k.startsWith("i") || k.startsWith("o") || k.startsWith("u")){
                    if(k.endsWith("a") ||k.endsWith("e") || k.endsWith("i") || k.endsWith("o") || k.endsWith("u")){
                       num++;
                    }
                }
                pref[i] +=pref[i-1] + num;
            }

            for (int i = 0; i < queries.length ; i++) {
                int a[] = queries[i];
                int left = a[0];
                int right = a[1];
                if (left == 0) {
                    list.add(pref[right]);
                } else {
                    int rm = pref[right] - pref[left];
                    String h = words[left];
                    int jm = 0;
                    if (h.startsWith("a") || h.startsWith("e") || h.startsWith("i") || h.startsWith("o") || h.startsWith("u")) {
                        if (h.endsWith("a") || h.endsWith("e") || h.endsWith("i") || h.endsWith("o") || h.endsWith("u")) {
                            jm++;
                        }
                    }
                    list.add(rm + jm);
                }
            }
           int res[] = new int[list.size()];
                for (int i = 0; i < list.size(); i++) {
                    res[i] = list.get(i);
                }
            System.out.println(Arrays.toString(res));
            }

    }






    public static class Pair {
        public long a;
        public long  b;
        public int hashCode;

        Pair(long a, long b) {
            this.a = a;
            this.b = b;
            this.hashCode = Objects.hash(a, b);
        }


        @Override
        public String toString() {
            return a + " -> " + b;
        }


        @Override
        public boolean equals(Object o) {
            if (this == o)
                return true;
            if (o == null || getClass() != o.getClass())
                return false;
            Pair that = (Pair) o;
            return a == that.a && b == that.b;
        }

        @Override
        public int hashCode() {
            return this.hashCode;
        }
    }

}




class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                String line = br.readLine();

                if (line == null) {
                    return null;
                }

                st = new StringTokenizer(line);

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    String nextLine() {
        String str = "";
        try {
            if (st.hasMoreTokens()) {
                str = st.nextToken("\n");
            } else {
                str = br.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }
    public static long gcd(long a, long b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

}
